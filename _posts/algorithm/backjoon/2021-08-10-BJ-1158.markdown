---
layout: post
title:  "BackJoon - 1158"
subtitle:   "BackJoon - 1158"
categories: algorithm
tags: backjoon
---

## 1158. 요세푸스 문제

[요세푸스 문제](https://www.acmicpc.net/problem/1244)


```
`문제`
요세푸스 문제는 다음과 같다.

1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.

N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.
```
---
```
`입력`
첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)

`출력`
예제와 같이 요세푸스 순열을 출력한다.

`예제 입력`
7 3

`예제 출력 1`
<3, 6, 2, 7, 5, 1, 4>

```


## int배열 사용

```java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BJ_스위치켜고끄기_1244 {
	
	static int N, COUNT;
	static int[] switches;
	static int gender, num;
	
	public static void main(String[] args) throws Exception{
		System.setIn( new FileInputStream("input.txt"));
		BufferedReader br = new BufferedReader(  new InputStreamReader(System.in) );
		
		N = Integer.parseInt( br.readLine() );
		
		switches = new int[N+1];
		
		StringTokenizer st = new StringTokenizer( br.readLine() );
		
		for (int i = 1; i <= N; i++) {
			//switches[i] = Integer.parseInt(st.nextToken());
			switches[i] = st.nextToken().charAt(0) - '0';
		}
		
		COUNT = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < COUNT; i++) {
			st = new StringTokenizer(br.readLine());
			gender = Integer.parseInt(st.nextToken());
			num = Integer.parseInt(st.nextToken());
			
			if( gender == 1 ) {
				male();
			}else if(gender == 2) {
				female();
			}
			
		}
		// 출력
		for (int i = 1; i <= N; i++) {
			if(i%20 == 0) System.out.println();
			System.out.print(switches[i] + " ");
		}
	}

	static void male() {
		for (int i = num; i <= N; i+= num) {
			switches[i] = switches[i]==0 ? 1 : 0;
		}
	}
	
	
	static void female() {
		switches[num] = switches[num]==0 ? 1 : 0;
		int cnt = 1;
		while(num-cnt >= 1 && num+cnt <= N) {
			
			if( switches[num-cnt] != switches[num+cnt] ) break;
			else {
				switches[num-cnt] = switches[num-cnt]==0 ? 1 : 0;
				switches[num+cnt] = switches[num+cnt]==0 ? 1 : 0;
				cnt++;
			}
			
			
		}
	}
	
}
```

## Boolean배열 사용

```
		 String s1 = "H"; 
		 String s2 = "H";   				// 리터럴 상수로 같은 주소
			 


		 String o1 = new String("H");		// 힙에 생성
		 String o2 = "H"; 					// 리터럴  
		 // 서로 다른 주소, ==으로 비교시 false가 나옴.  
			
```


```java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BJ_스위치켜고끄기_1244_Refactoring_Boolean {
	
	static int N, COUNT;
	static boolean[] switches;
	static int gender, num;
	
	public static void main(String[] args) throws Exception{
		System.setIn( new FileInputStream("input.txt"));
		BufferedReader br = new BufferedReader(  new InputStreamReader(System.in) );
		
		N = Integer.parseInt( br.readLine() );
		
		switches = new boolean[N+1];
		
		StringTokenizer st = new StringTokenizer( br.readLine() );
		
		for (int i = 1; i <= N; i++) {
		
			if(st.nextToken().equals("1"))  switches[i] = true;
			//if(st.nextToken() == "1")  switches[i] = true;

		}
		
		COUNT = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < COUNT; i++) {
			st = new StringTokenizer(br.readLine());
			gender = Integer.parseInt(st.nextToken());
			num = Integer.parseInt(st.nextToken());
			
			if( gender == 1 ) {
				male();
			}else if(gender == 2) {
				female();
			}
			
		}
		// 출력
		for (int i = 1; i <= N; i++) {
			System.out.print(switches[i] ? 1 : 0);
			
			if(i%20 == 0) {
				System.out.println();
			}else {
				System.out.print(" ");
			}
			
		}
	}

	static void male() {
		for (int i = num; i <= N; i+= num) {
			switches[i] = !switches[i];
		}
	}
	
	
	static void female() {
		switches[num] = !switches[num];
		int cnt = 1;
		while(num-cnt >= 1 && num+cnt <= N) {
			
			if( switches[num-cnt] != switches[num+cnt] ) break;
			else {
				switches[num-cnt] = !switches[num-cnt];
				switches[num+cnt] = !switches[num+cnt];
				cnt++;
			}
			
			
		}
	}
	
}

```


## BitSet배열 사용


```java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.BitSet;
import java.util.StringTokenizer;

public class BJ_스위치켜고끄기_1244_Refactoring_BitSet {
	
	static int N, COUNT;
	static BitSet switches;
	static int gender, num;
	
	public static void main(String[] args) throws Exception{
		System.setIn( new FileInputStream("input.txt"));
		BufferedReader br = new BufferedReader(  new InputStreamReader(System.in) );
		
		N = Integer.parseInt( br.readLine() );
		
		switches = new BitSet(N+1);
		
		StringTokenizer st = new StringTokenizer( br.readLine() );
		
		for (int i = 1; i <= N; i++) {
			
		
			if(st.nextToken().equals("1"))  switches.set(i);
	

		}
		
		COUNT = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < COUNT; i++) {
			st = new StringTokenizer(br.readLine());
			gender = Integer.parseInt(st.nextToken());
			num = Integer.parseInt(st.nextToken());
			
			if( gender == 1 ) {
				male();
			}else if(gender == 2) {
				female();
			}
			
		}
		// 출력
		for (int i = 1; i <= N; i++) {
			System.out.print(switches.get(i) ? 1 : 0);
			
			if(i%20 == 0) {
				System.out.println();
			}else {
				System.out.print(" ");
			}
			
		}
	}

	static void male() {
		for (int i = num; i <= N; i+= num) {
			switches.flip(i);
		}
	}
	
	
	static void female() {
		switches.flip(num);
		int cnt = 1;
		while(num-cnt >= 1 && num+cnt <= N) {
			
			if( switches.get(num-cnt) != switches.get(num+cnt) ) break;
			else {
				switches.flip(num-cnt);
				switches.flip(num+cnt);
				cnt++;
			}
			
			
		}
	}
	
}
```