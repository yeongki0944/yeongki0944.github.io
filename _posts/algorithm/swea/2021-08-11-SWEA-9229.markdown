---
layout: post
title:  "SWEA - 9229"
subtitle:   "SWEA - 9229"
categories: algorithm
tags: swea
---

## 9229. 한빈이와 Spot Mart D3
[한빈이와 Spot Mart](https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AW8Wj7cqbY0DFAXN)

```
한빈이는 퇴근길에 스팟마트에 들러 과자 두 봉지를 사서 양 손에 하나씩 들고 가려고 한다.
스팟마트에는 N개의 과자 봉지가 있으며, 각 과자 봉지는 ai그램의 무게를 가진다.
배가 많이 고픈 한빈이는 최대한 양이 많은 (무게가 많이 나가는) 과자 봉지를 고르고 싶으나
과자 두 봉지의 무게가 M 그램을 초과하면 무거워서 과자를 들고 다닐 수 없다.
한빈이가 들고 다닐수 있는 과자들의 최대 무게 합을 출력하라. 한빈이는 과자를 “정확히” 두 봉지 사야 함에 유의하라.



[입력]
첫 번째 줄에 테스트 케이스의 수 TC 가 주어진다.
이후 TC 개의 테스트 케이스가 새 줄로 구분되어 주어진다. 각 테스트 케이스는 다음과 같이 구성되었다.
첫 번째 줄에 과자 봉지의 개수와 무게 합 제한을 나타내는 자연수 N, M이 주어진다.
(2 ≤ N ≤ 1000 , 2 ≤ M ≤ 2000000)
이후 N개의 줄에 각 과자봉지의 무게 가 주어진다. (1 ≤ ai ≤ 1000000)



[출력]
각 테스트 케이스마다 ‘#x’(x는 테스트 케이스 번호를 의미, 1부터 시작)를 출력하고,

한빈이가 들고 갈 수 있는 과자 봉지의 무게 합 최대를 출력하라.

만약 한빈이가 두 과자를 들고 갈 방법이 없는 경우에는 -1을출력한다.
```


## Point
 
```
 중요도 : ⭐⭐⭐⭐⭐
 소요시간 : 14분
 
```




## 나의 풀이

```java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/* 
 풀이 시간 : 문제분석 4분 / 9:09 ~ 9:23  14분 
 
 총평 
 	풀이시 BASIC_Comb_FC.java파일을 참고하여 조합을 구성하는 코드를 작성했음.
 	이 부분에 대해서 더 연습이 필요할 듯 하다.
 
 https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AW8Wj7cqbY0DFAXN
 */

public class SWEA_9229 {
	static int T, N, Limit, max;
	static int[] item;
	static int[] tgt;
	public static void main(String[] args) throws Exception {
		System.setIn(new FileInputStream("input-9229.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			Limit = Integer.parseInt(st.nextToken());
			max = -1;
			item = new int[N];
			tgt = new int[2];
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++) {
				item[i] = Integer.parseInt(st.nextToken());
			}
			
			comb( 0, 0, 0 );
			
			System.out.println("#" + t + " " + max);
		}
	}
	
	static void comb(int srcIdx, int tgtIdx, int weight) {
		// 과자봉지가 2개가 되어야 된다.  3개중에 2개를 찾는 조합 
		// 과자봉지 무게가 Limit를 넘을 경우 종료
		// 탐색할게 없으면 종료
		if(weight > Limit) return;
		if(tgtIdx == tgt.length) {
			max = Math.max(max, weight);
			return;
		}
		
		// src로 부터 모든 수를 고려, 이미 선택된 숫자는 제외
		for (int i = srcIdx; i < N; i++) {
		
			tgt[tgtIdx] = item[i];
			comb( i+1, tgtIdx + 1, weight+item[i] );
		}
		
		
	}

}

```




## 수업 Solution

```java
// 9229. 한빈이와 Spot Mart D3
// https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AW8Wj7cqbY0DFAXN

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SWEA_9229_Solution {
	static int T, N, M, ans;
	static int[] src;
	static int[] tgt = new int[2];

	public static void main(String[] args) throws Exception {
		System.setIn(new FileInputStream("input-9229.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			ans = -1;
			
			src = new int[N];
			//tgt = new int[2];
			
			st = new StringTokenizer(br.readLine());
			
			for (int i = 0; i < N; i++) {
				src[i] = Integer.parseInt(st.nextToken());
			}
			
			comb( 0, 0 );
			
			System.out.println("#" + t + " " + ans);
		}
	}
	
	static void comb( int srcIdx, int tgtIdx ) {
		// base case 
		if(tgtIdx == 2) {	
			// base case & complete code
			int sum = tgt[0] + tgt[1];
			if( sum > M) return;
			ans = Math.max(ans, sum);
			return;
		}
		
		if( srcIdx == N ) return;	// for문을 사용하지 않고 재귀를 2번 사용할려고 
		
		
		
		tgt[tgtIdx] = src[srcIdx];
		
		// 다음 타갯 
		comb( srcIdx+1, tgtIdx + 1 );
		comb( srcIdx+1, tgtIdx );

		
		
	}
	
	
}
```

